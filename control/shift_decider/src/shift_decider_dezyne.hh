// Generated by dzn code from /home/karol/autoware/src/universe/autoware.universe/control/shift_decider/src/shift_decider_dezyne.dzn
#include <dzn/meta.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef ENUM_GEARCOMMAND
#define ENUM_GEARCOMMAND
enum struct GearCommand
{
  NONE,NEUTRAL,DRIVE,DRIVE_2,DRIVE_3,DRIVE_4,DRIVE_5,DRIVE_6,DRIVE_7,DRIVE_8,DRIVE_9,DRIVE_10,DRIVE_11,DRIVE_12,DRIVE_13,DRIVE_14,DRIVE_15,DRIVE_16,DRIVE_17,DRIVE_18,REVERSE,REVERSE_2,PARK,LOW,LOW_2
};
namespace dzn
{
  char const* to_cstr (::GearCommand v);
  std::string to_string (::GearCommand v);
}
template <typename Char, typename Traits>
std::basic_ostream<Char, Traits> & operator << (std::basic_ostream<Char, Traits>& os, ::GearCommand v)
{
  return os << dzn::to_cstr (v);
}
namespace dzn
{
  ::GearCommand to_GearCommand (std::string s);
}
#endif // ENUM_GEARCOMMAND
#ifndef ENUM_AUTOWARESTATE
#define ENUM_AUTOWARESTATE
enum struct AutowareState
{
  ZERO_INDEX,INITIALIZING,WAITING_FOR_ROUTE,PLANNING,WAITING_FOR_ENGAGE,DRIVING,ARRIVED_GOAL,FINALIZING
};
namespace dzn
{
  char const* to_cstr (::AutowareState v);
  std::string to_string (::AutowareState v);
}
template <typename Char, typename Traits>
std::basic_ostream<Char, Traits> & operator << (std::basic_ostream<Char, Traits>& os, ::AutowareState v)
{
  return os << dzn::to_cstr (v);
}
namespace dzn
{
  ::AutowareState to_AutowareState (std::string s);
}
#endif // ENUM_AUTOWARESTATE
#ifndef ENUM_SIGN
#define ENUM_SIGN
enum struct Sign
{
  ZERO,POSITIVE,NEGATIVE
};
namespace dzn
{
  char const* to_cstr (::Sign v);
  std::string to_string (::Sign v);
}
template <typename Char, typename Traits>
std::basic_ostream<Char, Traits> & operator << (std::basic_ostream<Char, Traits>& os, ::Sign v)
{
  return os << dzn::to_cstr (v);
}
namespace dzn
{
  ::Sign to_Sign (std::string s);
}
#endif // ENUM_SIGN
#ifndef IPUB_SHIFT_CMD_HH
#define IPUB_SHIFT_CMD_HH
struct Ipub_shift_cmd
{
  dzn::port::meta dzn_meta;
  struct
    {
      std::function< ::GearCommand ()> gear_cmd;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  std::vector<char const*> dzn_prefix;
  int dzn_state;
  Ipub_shift_cmd* dzn_peer;
  bool dzn_busy;
  Ipub_shift_cmd (dzn::port::meta const& m);
  virtual ~Ipub_shift_cmd ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_sync ();
  void dzn_check_bindings ();
};
#endif // IPUB_SHIFT_CMD_HH
#ifndef ISUB_AUTOWARE_STATE_HH
#define ISUB_AUTOWARE_STATE_HH
struct Isub_autoware_state
{
  dzn::port::meta dzn_meta;
  struct
    {
      std::function< ::AutowareState ()> state;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  std::vector<char const*> dzn_prefix;
  int dzn_state;
  Isub_autoware_state* dzn_peer;
  bool dzn_busy;
  Isub_autoware_state (dzn::port::meta const& m);
  virtual ~Isub_autoware_state ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_sync ();
  void dzn_check_bindings ();
};
#endif // ISUB_AUTOWARE_STATE_HH
#ifndef IEVALUATE_LONGITUDINAL_SPEED_HH
#define IEVALUATE_LONGITUDINAL_SPEED_HH
struct Ievaluate_longitudinal_speed
{
  dzn::port::meta dzn_meta;
  struct
    {
      std::function< ::Sign ()> request;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  std::vector<char const*> dzn_prefix;
  int dzn_state;
  Ievaluate_longitudinal_speed* dzn_peer;
  bool dzn_busy;
  Ievaluate_longitudinal_speed (dzn::port::meta const& m);
  virtual ~Ievaluate_longitudinal_speed ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_sync ();
  void dzn_check_bindings ();
};
#endif // IEVALUATE_LONGITUDINAL_SPEED_HH
#ifndef IGET_PARAMS_HH
#define IGET_PARAMS_HH
struct Iget_params
{
  dzn::port::meta dzn_meta;
  struct
    {
      std::function< bool ()> park_on_goal;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  std::vector<char const*> dzn_prefix;
  int dzn_state;
  Iget_params* dzn_peer;
  bool dzn_busy;
  Iget_params (dzn::port::meta const& m);
  virtual ~Iget_params ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_sync ();
  void dzn_check_bindings ();
};
#endif // IGET_PARAMS_HH
#ifndef SHIFT_DECIDER_HH
#define SHIFT_DECIDER_HH
struct shift_decider: public dzn::component
{
  dzn::meta dzn_meta;
  dzn::runtime& dzn_runtime;
  dzn::locator const& dzn_locator;
  ::GearCommand dzn_reply_GearCommand;
  ::AutowareState dzn_reply_AutowareState;
  ::Sign dzn_reply_Sign;
  bool dzn_reply_bool;
  std::function<void ()> dzn_out_pub_shift_cmd;
  ::Ipub_shift_cmd pub_shift_cmd;
  ::Ipub_shift_cmd sub_current_gear;
  ::Isub_autoware_state sub_autoware_state;
  ::Ievaluate_longitudinal_speed evaluate_longitudinal_speed;
  ::Iget_params get_params;
  shift_decider (dzn::locator const& locator);
  void dzn_update ();
  private:
  void pub_shift_cmd_gear_cmd ();
};
#endif // SHIFT_DECIDER_HH
// version 2.18.0.rc6
