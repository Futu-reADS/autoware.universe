// Generated by dzn code from /home/karol/autoware/src/universe/autoware.universe/control/shift_decider/src/shift_decider_dezyne.dzn
#include "shift_decider_dezyne.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
namespace dzn
{
  char const*
  to_cstr (::GearCommand v)
    {
      switch (v)
        {
          case ::GearCommand::NONE: return "GearCommand:NONE";
          case ::GearCommand::NEUTRAL: return "GearCommand:NEUTRAL";
          case ::GearCommand::DRIVE: return "GearCommand:DRIVE";
          case ::GearCommand::DRIVE_2: return "GearCommand:DRIVE_2";
          case ::GearCommand::DRIVE_3: return "GearCommand:DRIVE_3";
          case ::GearCommand::DRIVE_4: return "GearCommand:DRIVE_4";
          case ::GearCommand::DRIVE_5: return "GearCommand:DRIVE_5";
          case ::GearCommand::DRIVE_6: return "GearCommand:DRIVE_6";
          case ::GearCommand::DRIVE_7: return "GearCommand:DRIVE_7";
          case ::GearCommand::DRIVE_8: return "GearCommand:DRIVE_8";
          case ::GearCommand::DRIVE_9: return "GearCommand:DRIVE_9";
          case ::GearCommand::DRIVE_10: return "GearCommand:DRIVE_10";
          case ::GearCommand::DRIVE_11: return "GearCommand:DRIVE_11";
          case ::GearCommand::DRIVE_12: return "GearCommand:DRIVE_12";
          case ::GearCommand::DRIVE_13: return "GearCommand:DRIVE_13";
          case ::GearCommand::DRIVE_14: return "GearCommand:DRIVE_14";
          case ::GearCommand::DRIVE_15: return "GearCommand:DRIVE_15";
          case ::GearCommand::DRIVE_16: return "GearCommand:DRIVE_16";
          case ::GearCommand::DRIVE_17: return "GearCommand:DRIVE_17";
          case ::GearCommand::DRIVE_18: return "GearCommand:DRIVE_18";
          case ::GearCommand::REVERSE: return "GearCommand:REVERSE";
          case ::GearCommand::REVERSE_2: return "GearCommand:REVERSE_2";
          case ::GearCommand::PARK: return "GearCommand:PARK";
          case ::GearCommand::LOW: return "GearCommand:LOW";
          case ::GearCommand::LOW_2: return "GearCommand:LOW_2";
        }
      return "";
    }
  std::string
  to_string (::GearCommand v)
    {
      return to_cstr (v);
    }
}
namespace dzn
{
  ::GearCommand
  to_GearCommand (std::string s)
    {
      static std::map<std::string, ::GearCommand> m =   {
            {"GearCommand:NONE", ::GearCommand::NONE},
            {"GearCommand:NEUTRAL", ::GearCommand::NEUTRAL},
            {"GearCommand:DRIVE", ::GearCommand::DRIVE},
            {"GearCommand:DRIVE_2", ::GearCommand::DRIVE_2},
            {"GearCommand:DRIVE_3", ::GearCommand::DRIVE_3},
            {"GearCommand:DRIVE_4", ::GearCommand::DRIVE_4},
            {"GearCommand:DRIVE_5", ::GearCommand::DRIVE_5},
            {"GearCommand:DRIVE_6", ::GearCommand::DRIVE_6},
            {"GearCommand:DRIVE_7", ::GearCommand::DRIVE_7},
            {"GearCommand:DRIVE_8", ::GearCommand::DRIVE_8},
            {"GearCommand:DRIVE_9", ::GearCommand::DRIVE_9},
            {"GearCommand:DRIVE_10", ::GearCommand::DRIVE_10},
            {"GearCommand:DRIVE_11", ::GearCommand::DRIVE_11},
            {"GearCommand:DRIVE_12", ::GearCommand::DRIVE_12},
            {"GearCommand:DRIVE_13", ::GearCommand::DRIVE_13},
            {"GearCommand:DRIVE_14", ::GearCommand::DRIVE_14},
            {"GearCommand:DRIVE_15", ::GearCommand::DRIVE_15},
            {"GearCommand:DRIVE_16", ::GearCommand::DRIVE_16},
            {"GearCommand:DRIVE_17", ::GearCommand::DRIVE_17},
            {"GearCommand:DRIVE_18", ::GearCommand::DRIVE_18},
            {"GearCommand:REVERSE", ::GearCommand::REVERSE},
            {"GearCommand:REVERSE_2", ::GearCommand::REVERSE_2},
            {"GearCommand:PARK", ::GearCommand::PARK},
            {"GearCommand:LOW", ::GearCommand::LOW},
            {"GearCommand:LOW_2", ::GearCommand::LOW_2}};
      return m.at (s);
    }
}
namespace dzn
{
  char const*
  to_cstr (::AutowareState v)
    {
      switch (v)
        {
          case ::AutowareState::ZERO_INDEX: return "AutowareState:ZERO_INDEX";
          case ::AutowareState::INITIALIZING: return "AutowareState:INITIALIZING";
          case ::AutowareState::WAITING_FOR_ROUTE: return "AutowareState:WAITING_FOR_ROUTE";
          case ::AutowareState::PLANNING: return "AutowareState:PLANNING";
          case ::AutowareState::WAITING_FOR_ENGAGE: return "AutowareState:WAITING_FOR_ENGAGE";
          case ::AutowareState::DRIVING: return "AutowareState:DRIVING";
          case ::AutowareState::ARRIVED_GOAL: return "AutowareState:ARRIVED_GOAL";
          case ::AutowareState::FINALIZING: return "AutowareState:FINALIZING";
        }
      return "";
    }
  std::string
  to_string (::AutowareState v)
    {
      return to_cstr (v);
    }
}
namespace dzn
{
  ::AutowareState
  to_AutowareState (std::string s)
    {
      static std::map<std::string, ::AutowareState> m =   {
            {"AutowareState:ZERO_INDEX", ::AutowareState::ZERO_INDEX},
            {"AutowareState:INITIALIZING", ::AutowareState::INITIALIZING},
            {"AutowareState:WAITING_FOR_ROUTE", ::AutowareState::WAITING_FOR_ROUTE},
            {"AutowareState:PLANNING", ::AutowareState::PLANNING},
            {"AutowareState:WAITING_FOR_ENGAGE", ::AutowareState::WAITING_FOR_ENGAGE},
            {"AutowareState:DRIVING", ::AutowareState::DRIVING},
            {"AutowareState:ARRIVED_GOAL", ::AutowareState::ARRIVED_GOAL},
            {"AutowareState:FINALIZING", ::AutowareState::FINALIZING}};
      return m.at (s);
    }
}
namespace dzn
{
  char const*
  to_cstr (::Sign v)
    {
      switch (v)
        {
          case ::Sign::ZERO: return "Sign:ZERO";
          case ::Sign::POSITIVE: return "Sign:POSITIVE";
          case ::Sign::NEGATIVE: return "Sign:NEGATIVE";
        }
      return "";
    }
  std::string
  to_string (::Sign v)
    {
      return to_cstr (v);
    }
}
namespace dzn
{
  ::Sign
  to_Sign (std::string s)
    {
      static std::map<std::string, ::Sign> m =   {
            {"Sign:ZERO", ::Sign::ZERO},
            {"Sign:POSITIVE", ::Sign::POSITIVE},
            {"Sign:NEGATIVE", ::Sign::NEGATIVE}};
      return m.at (s);
    }
}
Ipub_shift_cmd::Ipub_shift_cmd (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_prefix ()
, dzn_state ()
, dzn_peer ()
, dzn_busy ()
{}
Ipub_shift_cmd::~Ipub_shift_cmd ()= default;
void
Ipub_shift_cmd::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_prefix.push_back (event);
  dzn_sync ();
}
void
Ipub_shift_cmd::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || dzn_prefix.empty ()) return;
  switch (dzn::hash (dzn_prefix, dzn_state))
    {
      case 1149568430u:
      //0:gear_cmd,GearCommand:REVERSE_2
      dzn_state = 0;
      break;
      case 4001586459u:
      //0:gear_cmd,GearCommand:REVERSE
      dzn_state = 0;
      break;
      case 1078320606u:
      //0:gear_cmd,GearCommand:PARK
      dzn_state = 0;
      break;
      case 3203965072u:
      //0:gear_cmd,GearCommand:NONE
      dzn_state = 0;
      break;
      case 4193096784u:
      //0:gear_cmd,GearCommand:NEUTRAL
      dzn_state = 0;
      break;
      case 2250414208u:
      //0:gear_cmd,GearCommand:LOW_2
      dzn_state = 0;
      break;
      case 1110239789u:
      //0:gear_cmd,GearCommand:LOW
      dzn_state = 0;
      break;
      case 2194200541u:
      //0:gear_cmd,GearCommand:DRIVE_9
      dzn_state = 0;
      break;
      case 3778781948u:
      //0:gear_cmd,GearCommand:DRIVE_8
      dzn_state = 0;
      break;
      case 1068396059u:
      //0:gear_cmd,GearCommand:DRIVE_7
      dzn_state = 0;
      break;
      case 2652977466u:
      //0:gear_cmd,GearCommand:DRIVE_6
      dzn_state = 0;
      break;
      case 4237558873u:
      //0:gear_cmd,GearCommand:DRIVE_5
      dzn_state = 0;
      break;
      case 1527172984u:
      //0:gear_cmd,GearCommand:DRIVE_4
      dzn_state = 0;
      break;
      case 3111754391u:
      //0:gear_cmd,GearCommand:DRIVE_3
      dzn_state = 0;
      break;
      case 401368502u:
      //0:gear_cmd,GearCommand:DRIVE_2
      dzn_state = 0;
      break;
      case 630001084u:
      //0:gear_cmd,GearCommand:DRIVE_18
      dzn_state = 0;
      break;
      case 1257880653u:
      //0:gear_cmd,GearCommand:DRIVE_17
      dzn_state = 0;
      break;
      case 1885760222u:
      //0:gear_cmd,GearCommand:DRIVE_16
      dzn_state = 0;
      break;
      case 2513639791u:
      //0:gear_cmd,GearCommand:DRIVE_15
      dzn_state = 0;
      break;
      case 3141519360u:
      //0:gear_cmd,GearCommand:DRIVE_14
      dzn_state = 0;
      break;
      case 3769398929u:
      //0:gear_cmd,GearCommand:DRIVE_13
      dzn_state = 0;
      break;
      case 102311202u:
      //0:gear_cmd,GearCommand:DRIVE_12
      dzn_state = 0;
      break;
      case 730190771u:
      //0:gear_cmd,GearCommand:DRIVE_11
      dzn_state = 0;
      break;
      case 1358070340u:
      //0:gear_cmd,GearCommand:DRIVE_10
      dzn_state = 0;
      break;
      case 1333628995u:
      //0:gear_cmd,GearCommand:DRIVE
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
  dzn_prefix.clear ();
  dzn_sync ();
}
void
Ipub_shift_cmd::dzn_sync ()
{
  if (this->dzn_peer != nullptr && this->dzn_peer != this)
    {
      dzn_peer->dzn_prefix = this->dzn_prefix;
      dzn_peer->dzn_state = this->dzn_state;
      dzn_peer->dzn_busy = this->dzn_busy;
    }
}
void
Ipub_shift_cmd::dzn_check_bindings ()
{
  if (!this->in.gear_cmd) throw dzn::binding_error (this->dzn_meta, "in.gear_cmd");
}
Isub_autoware_state::Isub_autoware_state (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_prefix ()
, dzn_state ()
, dzn_peer ()
, dzn_busy ()
{}
Isub_autoware_state::~Isub_autoware_state ()= default;
void
Isub_autoware_state::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_prefix.push_back (event);
  dzn_sync ();
}
void
Isub_autoware_state::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || dzn_prefix.empty ()) return;
  switch (dzn::hash (dzn_prefix, dzn_state))
    {
      case 470873141u:
      //0:state,AutowareState:WAITING_FOR_ROUTE
      dzn_state = 0;
      break;
      case 2767433792u:
      //0:state,AutowareState:WAITING_FOR_ENGAGE
      dzn_state = 0;
      break;
      case 532870404u:
      //0:state,AutowareState:PLANNING
      dzn_state = 0;
      break;
      case 2734587028u:
      //0:state,AutowareState:INITIALIZING
      dzn_state = 0;
      break;
      case 2518785954u:
      //0:state,AutowareState:FINALIZING
      dzn_state = 0;
      break;
      case 2089279919u:
      //0:state,AutowareState:DRIVING
      dzn_state = 0;
      break;
      case 130628524u:
      //0:state,AutowareState:ARRIVED_GOAL
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
  dzn_prefix.clear ();
  dzn_sync ();
}
void
Isub_autoware_state::dzn_sync ()
{
  if (this->dzn_peer != nullptr && this->dzn_peer != this)
    {
      dzn_peer->dzn_prefix = this->dzn_prefix;
      dzn_peer->dzn_state = this->dzn_state;
      dzn_peer->dzn_busy = this->dzn_busy;
    }
}
void
Isub_autoware_state::dzn_check_bindings ()
{
  if (!this->in.state) throw dzn::binding_error (this->dzn_meta, "in.state");
}
Ievaluate_longitudinal_speed::Ievaluate_longitudinal_speed (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_prefix ()
, dzn_state ()
, dzn_peer ()
, dzn_busy ()
{}
Ievaluate_longitudinal_speed::~Ievaluate_longitudinal_speed ()= default;
void
Ievaluate_longitudinal_speed::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_prefix.push_back (event);
  dzn_sync ();
}
void
Ievaluate_longitudinal_speed::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || dzn_prefix.empty ()) return;
  switch (dzn::hash (dzn_prefix, dzn_state))
    {
      case 3605001274u:
      //0:request,Sign:ZERO
      dzn_state = 0;
      break;
      case 2019508297u:
      //0:request,Sign:POSITIVE
      dzn_state = 0;
      break;
      case 621746733u:
      //0:request,Sign:NEGATIVE
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
  dzn_prefix.clear ();
  dzn_sync ();
}
void
Ievaluate_longitudinal_speed::dzn_sync ()
{
  if (this->dzn_peer != nullptr && this->dzn_peer != this)
    {
      dzn_peer->dzn_prefix = this->dzn_prefix;
      dzn_peer->dzn_state = this->dzn_state;
      dzn_peer->dzn_busy = this->dzn_busy;
    }
}
void
Ievaluate_longitudinal_speed::dzn_check_bindings ()
{
  if (!this->in.request) throw dzn::binding_error (this->dzn_meta, "in.request");
}
Iget_params::Iget_params (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_prefix ()
, dzn_state ()
, dzn_peer ()
, dzn_busy ()
{}
Iget_params::~Iget_params ()= default;
void
Iget_params::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_prefix.push_back (event);
  dzn_sync ();
}
void
Iget_params::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || dzn_prefix.empty ()) return;
  switch (dzn::hash (dzn_prefix, dzn_state))
    {
      case 4199326132u:
      //0:park_on_goal,true
      dzn_state = 0;
      break;
      case 3248092486u:
      //0:park_on_goal,false
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
  dzn_prefix.clear ();
  dzn_sync ();
}
void
Iget_params::dzn_sync ()
{
  if (this->dzn_peer != nullptr && this->dzn_peer != this)
    {
      dzn_peer->dzn_prefix = this->dzn_prefix;
      dzn_peer->dzn_state = this->dzn_state;
      dzn_peer->dzn_busy = this->dzn_busy;
    }
}
void
Iget_params::dzn_check_bindings ()
{
  if (!this->in.park_on_goal) throw dzn::binding_error (this->dzn_meta, "in.park_on_goal");
}
shift_decider::shift_decider (dzn::locator const& locator)
: dzn_meta ({"","shift_decider",0,  {},  {},  {[this] ()
        {
          pub_shift_cmd.dzn_check_bindings ();
        }, [this] ()
        {
          sub_current_gear.dzn_check_bindings ();
        }, [this] ()
        {
          sub_autoware_state.dzn_check_bindings ();
        }, [this] ()
        {
          evaluate_longitudinal_speed.dzn_check_bindings ();
        }, [this] ()
        {
          get_params.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, pub_shift_cmd ({  {"pub_shift_cmd",&pub_shift_cmd,this,&dzn_meta},  {"",0,0,0}})
, sub_current_gear ({  {"",0,0,0},  {"sub_current_gear",&sub_current_gear,this,&dzn_meta}})
, sub_autoware_state ({  {"",0,0,0},  {"sub_autoware_state",&sub_autoware_state,this,&dzn_meta}})
, evaluate_longitudinal_speed ({  {"",0,0,0},  {"evaluate_longitudinal_speed",&evaluate_longitudinal_speed,this,&dzn_meta}})
, get_params ({  {"",0,0,0},  {"get_params",&get_params,this,&dzn_meta}})
{
  this->dzn_meta.require =   {&sub_current_gear.dzn_meta,&sub_autoware_state.dzn_meta,&evaluate_longitudinal_speed.dzn_meta,&get_params.dzn_meta};
  this->dzn_runtime.performs_flush (this) = true;
  pub_shift_cmd.in.gear_cmd = [this] ()
    {
      return dzn::wrap_in (this, this->pub_shift_cmd, [&,this] ()
        {
          this->pub_shift_cmd_gear_cmd ();
          this->dzn_runtime.flush (this, dzn::coroutine_id (this->dzn_locator));
          if (dzn_out_pub_shift_cmd) dzn_out_pub_shift_cmd ();
          dzn_out_pub_shift_cmd = nullptr;
          return this->dzn_reply_GearCommand;
        }, "gear_cmd");
    };
}
void
shift_decider::dzn_update ()
{
  if (!this->pub_shift_cmd.dzn_busy) this->pub_shift_cmd.dzn_update_state (this->dzn_locator);
}
void
shift_decider::pub_shift_cmd_gear_cmd ()
{
  if (dzn::call_in (this, this->sub_autoware_state, "state", [&] ()
    {
      return this->sub_autoware_state.in.state ();
    }) == ::AutowareState::ARRIVED_GOAL && dzn::call_in (this, this->get_params, "park_on_goal", [&] ()
    {
      return this->get_params.in.park_on_goal ();
    }))
    {
      this->dzn_reply_GearCommand = ::GearCommand::PARK;
      if (this->dzn_out_pub_shift_cmd) this->dzn_out_pub_shift_cmd ();
      this->dzn_out_pub_shift_cmd = nullptr;
    }
  else if (dzn::call_in (this, this->evaluate_longitudinal_speed, "request", [&] ()
    {
      return this->evaluate_longitudinal_speed.in.request ();
    }) == ::Sign::POSITIVE)
    {
      this->dzn_reply_GearCommand = ::GearCommand::DRIVE;
      if (this->dzn_out_pub_shift_cmd) this->dzn_out_pub_shift_cmd ();
      this->dzn_out_pub_shift_cmd = nullptr;
    }
  else if (dzn::call_in (this, this->evaluate_longitudinal_speed, "request", [&] ()
    {
      return this->evaluate_longitudinal_speed.in.request ();
    }) == ::Sign::NEGATIVE)
    {
      this->dzn_reply_GearCommand = ::GearCommand::REVERSE;
      if (this->dzn_out_pub_shift_cmd) this->dzn_out_pub_shift_cmd ();
      this->dzn_out_pub_shift_cmd = nullptr;
    }
  else
    {
      this->dzn_reply_GearCommand = dzn::call_in (this, this->sub_current_gear, "gear_cmd", [&] ()
        {
          return this->sub_current_gear.in.gear_cmd ();
        });
      if (this->dzn_out_pub_shift_cmd) this->dzn_out_pub_shift_cmd ();
      this->dzn_out_pub_shift_cmd = nullptr;
    }
}
// version 2.18.0.rc6
