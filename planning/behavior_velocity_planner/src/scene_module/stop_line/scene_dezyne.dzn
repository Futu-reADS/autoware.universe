

interface IApproachState
{
    in State updateState();
    enum State {APPROACH, STOPPED, START};

    behavior {
        State state = State.APPROACH;
        on updateState: {
            state = State.STOPPED;
            reply(state);
        }
        on updateState: {
            state = State.APPROACH;
            reply(state);
        }
        on updateState: {
            state = State.START;
            reply(state);
        }
    } 
}

interface IApproach {
    in void ApproachStuff();
    
    behavior {
        
        on ApproachStuff: {}
    }
}

interface IStopped {
    in void StoppedStuff();
    behavior {
        on StoppedStuff: {}
    }
}

interface IStart {
    in void StartStuff();
    behavior {
        on StartStuff: {}
    }
}
// ModifyPathVelocity
component ApproachStateHandler {
    provides IApproachState approachState;
    requires IApproach approach;
    requires IStart start;
    requires IStopped stop;

    behavior {

        on approachState.updateState(): {
            [approachState.state.APPROACH] {
                approach.ApproachStuff();
                reply(IApproachState.State.STOPPED);
            }
            [approachState.state.STOPPED] {
                stop.StoppedStuff();
                reply(IApproachState.State.START);
                
            }
            [approachState.state.START] {
                start.StartStuff();
                reply(IApproachState.State.APPROACH);
            }
            
        }

    }
}