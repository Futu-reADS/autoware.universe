

interface IApproachState
{
    in State updateState();
    enum State {APPROACH, STOPPED, START};
    // This behavior makes sure we can change state only in specific way
    behavior {
        State state = State.APPROACH;
        [state.APPROACH] {
            on updateState: {
                state = State.STOPPED;
                reply(state);
            }
            on updateState: {
                state = State.APPROACH;
                reply(state);
            }
        }
        [state.STOPPED] {
            on updateState: {
                state = State.STOPPED;
                reply(state);
            }
            on updateState: {
                state = State.START;
                reply(state);
            }
        }
        [state.START] {
            on updateState: {
                state = State.START;
                reply(state);
            }
            on updateState: {
                state = State.APPROACH;
                reply(state);
            }
        }
    } 
}

interface IApproach {
    in IApproachState.State ApproachStuff();
    behavior {
        on ApproachStuff: {reply(IApproachState.State.APPROACH);}
        on ApproachStuff: {reply(IApproachState.State.STOPPED);}
    }
}

interface IStopped {
    in IApproachState.State StoppedStuff();
    behavior {
        on StoppedStuff: {reply(IApproachState.State.STOPPED);}
        on StoppedStuff: {reply(IApproachState.State.START);}
    }
}

interface IStart {
    in IApproachState.State StartStuff();
    behavior {
        on StartStuff: {reply(IApproachState.State.START);}
        on StartStuff: {reply(IApproachState.State.APPROACH);}
    }
}
// ModifyPathVelocity
component ApproachStateHandler {
    provides IApproachState approachState;
    requires IApproach approach;
    requires IStart start;
    requires IStopped stop;

    behavior {
        on approachState.updateState(): {
            [approachState.state.APPROACH] {
                reply(approach.ApproachStuff());
                // reply(IApproachState.State.STOPPED);
            }
            [approachState.state.STOPPED] {
                reply(stop.StoppedStuff());
                // reply(IApproachState.State.START);
                
            }
            [approachState.state.START] {
                reply(start.StartStuff());
                // reply(IApproachState.State.APPROACH);
            }
            
        }

    }
}