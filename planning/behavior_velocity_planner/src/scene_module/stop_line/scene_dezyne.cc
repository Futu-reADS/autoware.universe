// Generated by dzn code from /home/karol/autoware/src/universe/autoware.universe/planning/behavior_velocity_planner/src/scene_module/stop_line/scene_dezyne.dzn
#include "scene_dezyne.hh"
#include <dzn/locator.hh>
#include <dzn/runtime.hh>
#include <iterator>
#define STRINGIZING(x) #x
#define STR(x) STRINGIZING (x)
#define LOCATION __FILE__ ":" STR (__LINE__)
IApproachState::IApproachState (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
, state (::IApproachState::State::APPROACH)
{}
IApproachState::~IApproachState ()= default;
void
IApproachState::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IApproachState::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 3599409592u:
      //0:updateState
      dzn_state = 5;
      break;
      case 1136467885u:
      //1:State:APPROACH
      dzn_state = 0;
      state = IApproachState::State::APPROACH;
      break;
      case 8237912u:
      //1:State:START
      dzn_state = 2;
      state = IApproachState::State::START;
      break;
      case 3599409750u:
      //2:updateState
      dzn_state = 1;
      break;
      case 8238070u:
      //3:State:START
      dzn_state = 2;
      state = IApproachState::State::START;
      break;
      case 3712972001u:
      //3:State:STOPPED
      dzn_state = 4;
      state = IApproachState::State::STOPPED;
      break;
      case 3599409908u:
      //4:updateState
      dzn_state = 3;
      break;
      case 1136468201u:
      //5:State:APPROACH
      dzn_state = 0;
      state = IApproachState::State::APPROACH;
      break;
      case 3712972159u:
      //5:State:STOPPED
      dzn_state = 4;
      state = IApproachState::State::STOPPED;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IApproachState::dzn_check_bindings ()
{
  if (!this->in.updateState) throw dzn::binding_error (this->dzn_meta, "in.updateState");
}
namespace dzn
{
}
namespace dzn
{
  char const*
  to_cstr (::IApproachState::State v)
    {
      switch (v)
        {
          case ::IApproachState::State::APPROACH: return "State:APPROACH";
          case ::IApproachState::State::STOPPED: return "State:STOPPED";
          case ::IApproachState::State::START: return "State:START";
        }
      return "";
    }
  template <>
  std::string
  to_string (::IApproachState::State v)
    {
      return to_cstr (v);
    }
}
namespace dzn
{
  ::IApproachState::State
  to_IApproachState_State (std::string s)
    {
      static std::map<std::string, ::IApproachState::State> m =   {
            {"State:APPROACH", ::IApproachState::State::APPROACH},
            {"State:STOPPED", ::IApproachState::State::STOPPED},
            {"State:START", ::IApproachState::State::START}};
      return m.at (s);
    }
}
IApproach::IApproach (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
{}
IApproach::~IApproach ()= default;
void
IApproach::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IApproach::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 196803356u:
      //0:ApproachStuff
      dzn_state = 1;
      break;
      case 1136467885u:
      //1:State:APPROACH
      dzn_state = 0;
      break;
      case 3712971843u:
      //1:State:STOPPED
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IApproach::dzn_check_bindings ()
{
  if (!this->in.ApproachStuff) throw dzn::binding_error (this->dzn_meta, "in.ApproachStuff");
}
namespace dzn
{
}
IStopped::IStopped (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
{}
IStopped::~IStopped ()= default;
void
IStopped::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IStopped::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 614566456u:
      //0:StoppedStuff
      dzn_state = 1;
      break;
      case 8237912u:
      //1:State:START
      dzn_state = 0;
      break;
      case 3712971843u:
      //1:State:STOPPED
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IStopped::dzn_check_bindings ()
{
  if (!this->in.StoppedStuff) throw dzn::binding_error (this->dzn_meta, "in.StoppedStuff");
}
namespace dzn
{
}
IStart::IStart (dzn::port::meta const& m)
: dzn_meta (m)
, dzn_share_p (true)
, dzn_label ("")
, dzn_state ()
{}
IStart::~IStart ()= default;
void
IStart::dzn_event (char const* event)
{
  if (!dzn_share_p) return;
  dzn_label = event;
}
void
IStart::dzn_update_state (dzn::locator const& locator)
{
  if (!dzn_share_p || !dzn_label) return;
  switch (dzn::hash (dzn_label, dzn_state))
    {
      case 4188205965u:
      //0:StartStuff
      dzn_state = 1;
      break;
      case 1136467885u:
      //1:State:APPROACH
      dzn_state = 0;
      break;
      case 8237912u:
      //1:State:START
      dzn_state = 0;
      break;
      default: locator.get<dzn::illegal_handler> ().handle (LOCATION);
    }
}
void
IStart::dzn_check_bindings ()
{
  if (!this->in.StartStuff) throw dzn::binding_error (this->dzn_meta, "in.StartStuff");
}
namespace dzn
{
}
ApproachStateHandler::ApproachStateHandler (dzn::locator const& locator)
: dzn_meta ({"ApproachStateHandler","ApproachStateHandler",0,  {},  {},  {[this] ()
        {
          approachState.dzn_check_bindings ();
        }, [this] ()
        {
          approach.dzn_check_bindings ();
        }, [this] ()
        {
          start.dzn_check_bindings ();
        }, [this] ()
        {
          stop.dzn_check_bindings ();
        }}})
, dzn_runtime (locator.get<dzn::runtime> ())
, dzn_locator (locator)
, approachState ({  {"approachState",&approachState,this,&dzn_meta},  {"approachState",0,0,0}},this)
, approach ({  {"approach",0,0,0},  {"approach",&approach,this,&dzn_meta}},this)
, start ({  {"start",0,0,0},  {"start",&start,this,&dzn_meta}},this)
, stop ({  {"stop",0,0,0},  {"stop",&stop,this,&dzn_meta}},this)
{
  this->dzn_meta.require =   {&approach.dzn_meta,&start.dzn_meta,&stop.dzn_meta};
  this->dzn_runtime.performs_flush (this) = true;
  this->approachState.in.updateState = [this] ()
    {
      this->dzn_out_approachState = &this->approachState.in.updateState.dzn_out_binding;
      this->dzn_reply_IApproachState_State = &this->approachState.in.updateState.reply;
      this->approachState_updateState ();
      return this->approachState.in.updateState.reply;
    };
}
void
ApproachStateHandler::approachState_updateState ()
{
  if (approachState.state == ::IApproachState::State::APPROACH)
    {
      *this->dzn_reply_IApproachState_State = this->approach.in.ApproachStuff ();
      if ((*this->dzn_out_approachState)) (*this->dzn_out_approachState) ();
      (*this->dzn_out_approachState) = nullptr;
    }
  else if (approachState.state == ::IApproachState::State::STOPPED)
    {
      *this->dzn_reply_IApproachState_State = this->stop.in.StoppedStuff ();
      if ((*this->dzn_out_approachState)) (*this->dzn_out_approachState) ();
      (*this->dzn_out_approachState) = nullptr;
    }
  else if (approachState.state == ::IApproachState::State::START)
    {
      *this->dzn_reply_IApproachState_State = this->start.in.StartStuff ();
      if ((*this->dzn_out_approachState)) (*this->dzn_out_approachState) ();
      (*this->dzn_out_approachState) = nullptr;
    }
  else if (!(approachState.state == ::IApproachState::State::START) && (!(approachState.state == ::IApproachState::State::STOPPED) && !(approachState.state == ::IApproachState::State::APPROACH))) this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
  else this->dzn_locator.get<dzn::illegal_handler> ().handle (LOCATION);
}
// version 2.18.0
