// Generated by dzn code from /home/karol/autoware/src/universe/autoware.universe/planning/behavior_velocity_planner/src/scene_module/stop_line/scene_dezyne.dzn
#include <dzn/runtime.hh>
namespace dzn
{
  struct locator;
  struct runtime;
}
#include <iostream>
#include <vector>
#include <map>
#ifndef ENUM_STATE
#define ENUM_STATE
enum struct State
{
  APPROACH,STOPPED,START
};
namespace dzn
{
  char const* to_cstr (::State v);
  template <>
  std::string to_string (::State v);
}
template <typename Char, typename Traits>
std::basic_ostream<Char, Traits> & operator << (std::basic_ostream<Char, Traits>& os, ::State v)
{
  return os << dzn::to_cstr (v);
}
namespace dzn
{
  ::State to_State (std::string s);
}
#endif // ENUM_STATE
#ifndef IVEHICLESTATE_HH
#define IVEHICLESTATE_HH
struct IVehicleState
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<::State ()> updateState;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  ::State state;
  IVehicleState (dzn::port::meta const& m);
  template <typename Component>
  IVehicleState (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
  , state (::State::APPROACH)
    {
      in.updateState.set (that, this, "updateState");
    }
  virtual ~IVehicleState ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::IVehicleState& provide, ::IVehicleState& require)
    {
      require.in.updateState = provide.in.updateState;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // IVEHICLESTATE_HH
#ifndef IAPPROACH_HH
#define IAPPROACH_HH
struct IApproach
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> ApproachStuff;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  IApproach (dzn::port::meta const& m);
  template <typename Component>
  IApproach (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.ApproachStuff.set (that, this, "ApproachStuff");
    }
  virtual ~IApproach ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::IApproach& provide, ::IApproach& require)
    {
      require.in.ApproachStuff = provide.in.ApproachStuff;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // IAPPROACH_HH
#ifndef ISTOPPED_HH
#define ISTOPPED_HH
struct IStopped
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> StoppedStuff;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  IStopped (dzn::port::meta const& m);
  template <typename Component>
  IStopped (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.StoppedStuff.set (that, this, "StoppedStuff");
    }
  virtual ~IStopped ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::IStopped& provide, ::IStopped& require)
    {
      require.in.StoppedStuff = provide.in.StoppedStuff;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // ISTOPPED_HH
#ifndef ISTART_HH
#define ISTART_HH
struct IStart
{
  dzn::port::meta dzn_meta;
  struct
    {
      dzn::in::event<void ()> StartStuff;
    } in;
  struct
    {
    } out;
  bool dzn_share_p;
  char const* dzn_label;
  int dzn_state;
  IStart (dzn::port::meta const& m);
  template <typename Component>
  IStart (dzn::port::meta const& m, Component* that)
  : dzn_meta (m)
  , dzn_share_p (true)
  , dzn_label ("")
  , dzn_state ()
    {
      in.StartStuff.set (that, this, "StartStuff");
    }
  virtual ~IStart ();
  void dzn_event (char const* event);
  void dzn_update_state (dzn::locator const& locator);
  void dzn_check_bindings ();
};
namespace dzn
{
  inline void connect (::IStart& provide, ::IStart& require)
    {
      require.in.StartStuff = provide.in.StartStuff;
      provide.dzn_meta.require = require.dzn_meta.require;
      require.dzn_meta.provide = provide.dzn_meta.provide;
      provide.dzn_share_p = require.dzn_share_p = provide.dzn_share_p && require.dzn_share_p;
    }
}
#endif // ISTART_HH
#ifndef MODIFYPATHVELOCITY_HH
#define MODIFYPATHVELOCITY_HH
struct ModifyPathVelocity: public dzn::component
{
  dzn::meta dzn_meta;
  dzn::runtime& dzn_runtime;
  dzn::locator const& dzn_locator;
  ::State* dzn_reply_State;
  std::function<void ()>* dzn_out_vehicleState;
  ::IVehicleState vehicleState;
  ::IApproach approach;
  ::IStart start;
  ::IStopped stop;
  ModifyPathVelocity (dzn::locator const& locator);
  private:
  void vehicleState_updateState ();
};
#endif // MODIFYPATHVELOCITY_HH
// version 2.18.0
